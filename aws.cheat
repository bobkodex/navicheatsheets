% aws

# get public ip address of running instances by name
aws ec2 describe-instances --filter Name=tag:Name,Values=<running_name_tags> | jq .[][0].Instances[0].PublicIpAddress -r

# get instance-id by name
aws ec2 describe-instances --filter Name=tag:Name,Values=<all_name_tags> | jq .[][0].Instances[0].InstanceId -r

# decode authorization message
aws sts decode-authorization-message --encoded-message message

$ running_name_tags: aws ec2 describe-instances --query 'Reservations[*].Instances[*].[Tags]' --filters Name=instance-state-name,Values=running --output text | grep Name | awk '{print $2}'
$ all_name_tags: aws ec2 describe-instances --query 'Reservations[*].Instances[*].[Tags]' --output text | grep Name | awk '{print $2}'

# make all objects in bucket accessible for other accounts
for object in $(aws s3 ls s3://bucketname/ --recursive | awk '{print $4}'); do aws s3api put-object-acl --bucket bucketname --key $object --grant-full-control id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; done

# delete all buckets with specific name pattern
for bucket in $(aws s3 ls | grep part_of_bucket_name | awk '{print $3}'); do aws s3 rb --force s3://$bucket; done 

# run-instances command change default root volume size
aws ec2 run-instances --block-device-mapping 'DeviceName=/dev/sda1,Ebs={ VolumeSize=100}'

# delete all parameters in aws ssm parameters store
for name in $(aws ssm describe-parameters | jq -r .[][].Name | grep "<parameter_name>"); do aws ssm delete-parameters --name $name; done
